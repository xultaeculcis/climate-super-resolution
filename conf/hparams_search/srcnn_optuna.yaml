# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python run.py -m hparams_search=srcnn_optuna experiment=example_simple
# python run.py -m hparams_search=srcnn_optuna experiment=example_simple hydra.sweeper.n_trials=30

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
optimized_metric: "val/rmse"

hydra:
  # here we define Optuna hyperparameter search
  # it optimizes for value returned from function with @hydra.main decorator
  # learn more here: https://hydra.cc/docs/next/plugins/optuna_sweeper
  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper
    storage: null
    study_name: null
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # number of experiments that will be executed
    n_trials: 100

    # choose Optuna hyperparameter sampler
    # learn more here: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 42
      consider_prior: true
      prior_weight: 1.0
      consider_magic_clip: true
      consider_endpoints: true
      n_startup_trials: 10
      n_ei_candidates: 24
      multivariate: false
      warn_independent_sampling: true

    # define range of hyperparameters
    search_space:
      training.batch_size:
        type: categorical
        choices: [128, 192]
      training.lr:
        type: categorical
        choices: [ 1e-5, 6e-4, 3e-4, 1e-4, 6e-3 ]
      datamodule.cfg.resolutions:
        type: categorical
        choices: [ ["2.5m"], ["2.5m", "5m"], ["2.5m", "5m", "10m"] ]
      datamodule.cfg.normalization_method:
        type: categorical
        choices: [ "minmax", "z-score" ]
      datamodule.cfg.normalization_range:
        type: categorical
        choices: [ [-1.0, 1.0], [0.0, 1.0] ]
      datamodule.cfg.use_elevation:
        type: categorical
        choices: [ False, True ]
      datamodule.cfg.use_mask:
        type: categorical
        choices: [ False, True ]
      datamodule.cfg.use_global_min_max:
        type: categorical
        choices: [ False, True ]
      datamodule.cfg.use_extra_data:
        type: categorical
        choices: [ False, True ]
      datamodule.cfg.transforms.v_flip:
        type: categorical
        choices: [ False, True ]
      datamodule.cfg.transforms.h_flip:
        type: categorical
        choices: [ False, True ]
      datamodule.cfg.transforms.random_90_rotation:
        type: categorical
        choices: [ False, True ]